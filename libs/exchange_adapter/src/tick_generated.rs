// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod market {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum TickOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Tick<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Tick<'a> {
  type Inner = Tick<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Tick<'a> {
  pub const VT_TS: flatbuffers::VOffsetT = 4;
  pub const VT_PX: flatbuffers::VOffsetT = 6;
  pub const VT_QTY: flatbuffers::VOffsetT = 8;
  pub const VT_SYMBOL: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Tick { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TickArgs<'args>
  ) -> flatbuffers::WIPOffset<Tick<'bldr>> {
    let mut builder = TickBuilder::new(_fbb);
    builder.add_ts(args.ts);
    if let Some(x) = args.symbol { builder.add_symbol(x); }
    builder.add_qty(args.qty);
    builder.add_px(args.px);
    builder.finish()
  }


  #[inline]
  pub fn ts(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Tick::VT_TS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn px(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Tick::VT_PX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn qty(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Tick::VT_QTY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn symbol(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Tick::VT_SYMBOL, None)}
  }
}

impl flatbuffers::Verifiable for Tick<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("ts", Self::VT_TS, false)?
     .visit_field::<f32>("px", Self::VT_PX, false)?
     .visit_field::<f32>("qty", Self::VT_QTY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("symbol", Self::VT_SYMBOL, false)?
     .finish();
    Ok(())
  }
}
pub struct TickArgs<'a> {
    pub ts: u64,
    pub px: f32,
    pub qty: f32,
    pub symbol: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for TickArgs<'a> {
  #[inline]
  fn default() -> Self {
    TickArgs {
      ts: 0,
      px: 0.0,
      qty: 0.0,
      symbol: None,
    }
  }
}

pub struct TickBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TickBuilder<'a, 'b> {
  #[inline]
  pub fn add_ts(&mut self, ts: u64) {
    self.fbb_.push_slot::<u64>(Tick::VT_TS, ts, 0);
  }
  #[inline]
  pub fn add_px(&mut self, px: f32) {
    self.fbb_.push_slot::<f32>(Tick::VT_PX, px, 0.0);
  }
  #[inline]
  pub fn add_qty(&mut self, qty: f32) {
    self.fbb_.push_slot::<f32>(Tick::VT_QTY, qty, 0.0);
  }
  #[inline]
  pub fn add_symbol(&mut self, symbol: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Tick::VT_SYMBOL, symbol);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TickBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TickBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Tick<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Tick<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Tick");
      ds.field("ts", &self.ts());
      ds.field("px", &self.px());
      ds.field("qty", &self.qty());
      ds.field("symbol", &self.symbol());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Tick`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tick_unchecked`.
pub fn root_as_tick(buf: &[u8]) -> Result<Tick, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Tick>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Tick` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_tick_unchecked`.
pub fn size_prefixed_root_as_tick(buf: &[u8]) -> Result<Tick, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Tick>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Tick` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tick_unchecked`.
pub fn root_as_tick_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Tick<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Tick<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Tick` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tick_unchecked`.
pub fn size_prefixed_root_as_tick_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Tick<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Tick<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Tick and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Tick`.
pub unsafe fn root_as_tick_unchecked(buf: &[u8]) -> Tick {
  flatbuffers::root_unchecked::<Tick>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Tick and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Tick`.
pub unsafe fn size_prefixed_root_as_tick_unchecked(buf: &[u8]) -> Tick {
  flatbuffers::size_prefixed_root_unchecked::<Tick>(buf)
}
#[inline]
pub fn finish_tick_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Tick<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_tick_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Tick<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod market

