// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod market {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum OrderOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Order<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Order<'a> {
  type Inner = Order<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Order<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SYMBOL: flatbuffers::VOffsetT = 6;
  pub const VT_PRICE: flatbuffers::VOffsetT = 8;
  pub const VT_QTY: flatbuffers::VOffsetT = 10;
  pub const VT_SIDE: flatbuffers::VOffsetT = 12;
  pub const VT_FEATURES: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Order { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args OrderArgs<'args>
  ) -> flatbuffers::WIPOffset<Order<'bldr>> {
    let mut builder = OrderBuilder::new(_fbb);
    builder.add_qty(args.qty);
    builder.add_price(args.price);
    if let Some(x) = args.features { builder.add_features(x); }
    if let Some(x) = args.side { builder.add_side(x); }
    if let Some(x) = args.symbol { builder.add_symbol(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> Option<&'a str> {
      unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Order::VT_ID, None) }
  }
  #[inline]
  pub fn symbol(&self) -> Option<&'a str> {
      unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Order::VT_SYMBOL, None) }
  }
  #[inline]
  pub fn price(&self) -> f64 {
      unsafe { self._tab.get::<f64>(Order::VT_PRICE, Some(0.0)).unwrap() }
  }
  #[inline]
  pub fn qty(&self) -> f64 {
      unsafe { self._tab.get::<f64>(Order::VT_QTY, Some(0.0)).unwrap() }
  }
  #[inline]
  pub fn side(&self) -> Option<&'a str> {
      unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Order::VT_SIDE, None) }
  }
  #[inline]
  pub fn features(&self) -> Option<flatbuffers::Vector<'a, f32>> {
      unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(Order::VT_FEATURES, None) }
  }
}

impl flatbuffers::Verifiable for Order<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("symbol", Self::VT_SYMBOL, false)?
     .visit_field::<f64>("price", Self::VT_PRICE, false)?
     .visit_field::<f64>("qty", Self::VT_QTY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("side", Self::VT_SIDE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("features", Self::VT_FEATURES, false)?
     .finish();
    Ok(())
  }
}
pub struct OrderArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub symbol: Option<flatbuffers::WIPOffset<&'a str>>,
    pub price: f64,
    pub qty: f64,
    pub side: Option<flatbuffers::WIPOffset<&'a str>>,
    pub features: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
}
impl<'a> Default for OrderArgs<'a> {
  #[inline]
  fn default() -> Self {
    OrderArgs {
      id: None,
      symbol: None,
      price: 0.0,
      qty: 0.0,
      side: None,
      features: None,
    }
  }
}

pub struct OrderBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> OrderBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Order::VT_ID, id);
  }
  #[inline]
  pub fn add_symbol(&mut self, symbol: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Order::VT_SYMBOL, symbol);
  }
  #[inline]
  pub fn add_price(&mut self, price: f64) {
    self.fbb_.push_slot::<f64>(Order::VT_PRICE, price, 0.0);
  }
  #[inline]
  pub fn add_qty(&mut self, qty: f64) {
    self.fbb_.push_slot::<f64>(Order::VT_QTY, qty, 0.0);
  }
  #[inline]
  pub fn add_side(&mut self, side: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Order::VT_SIDE, side);
  }
  #[inline]
  pub fn add_features(&mut self, features: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Order::VT_FEATURES, features);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> OrderBuilder<'a, 'b> {
    let start = _fbb.start_table();
    OrderBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Order<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Order<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Order");
      ds.field("id", &self.id());
      ds.field("symbol", &self.symbol());
      ds.field("price", &self.price());
      ds.field("qty", &self.qty());
      ds.field("side", &self.side());
      ds.field("features", &self.features());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_order<'a>(buf: &'a [u8]) -> Order<'a> {
  unsafe { flatbuffers::root_unchecked::<Order<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_order<'a>(buf: &'a [u8]) -> Order<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Order<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `Order`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_unchecked`.
pub fn root_as_order(buf: &[u8]) -> Result<Order, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Order>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Order` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_order_unchecked`.
pub fn size_prefixed_root_as_order(buf: &[u8]) -> Result<Order, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Order>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Order` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_unchecked`.
pub fn root_as_order_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Order<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Order<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Order` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_unchecked`.
pub fn size_prefixed_root_as_order_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Order<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Order<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Order and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Order`.
pub unsafe fn root_as_order_unchecked(buf: &[u8]) -> Order {
  flatbuffers::root_unchecked::<Order>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Order and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Order`.
pub unsafe fn size_prefixed_root_as_order_unchecked(buf: &[u8]) -> Order {
  flatbuffers::size_prefixed_root_unchecked::<Order>(buf)
}
#[inline]
pub fn finish_order_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Order<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_order_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Order<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Market

