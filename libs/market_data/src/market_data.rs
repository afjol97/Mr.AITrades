// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod market_data {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum QuoteOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Quote<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Quote<'a> {
  type Inner = Quote<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Quote<'a> {
  pub const VT_SYMBOL: flatbuffers::VOffsetT = 4;
  pub const VT_BID: flatbuffers::VOffsetT = 6;
  pub const VT_ASK: flatbuffers::VOffsetT = 8;
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Quote { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args QuoteArgs<'args>
  ) -> flatbuffers::WIPOffset<Quote<'bldr>> {
    let mut builder = QuoteBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    builder.add_ask(args.ask);
    builder.add_bid(args.bid);
    if let Some(x) = args.symbol { builder.add_symbol(x); }
    builder.finish()
  }


  #[inline]
  pub fn symbol(&self) -> Option<&'a str> {
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Quote::VT_SYMBOL, None) }
  }
  #[inline]
  pub fn bid(&self) -> f32 {
    unsafe { self._tab.get::<f32>(Quote::VT_BID, Some(0.0)).unwrap() }
  }
  #[inline]
  pub fn ask(&self) -> f32 {
    unsafe { self._tab.get::<f32>(Quote::VT_ASK, Some(0.0)).unwrap() }
  }
  #[inline]
  pub fn timestamp(&self) -> u64 {
    unsafe { self._tab.get::<u64>(Quote::VT_TIMESTAMP, Some(0)).unwrap() }
  }
}

impl flatbuffers::Verifiable for Quote<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("symbol", Self::VT_SYMBOL, false)?
     .visit_field::<f32>("bid", Self::VT_BID, false)?
     .visit_field::<f32>("ask", Self::VT_ASK, false)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .finish();
    Ok(())
  }
}
pub struct QuoteArgs<'a> {
    pub symbol: Option<flatbuffers::WIPOffset<&'a str>>,
    pub bid: f32,
    pub ask: f32,
    pub timestamp: u64,
}
impl<'a> Default for QuoteArgs<'a> {
  #[inline]
  fn default() -> Self {
    QuoteArgs {
      symbol: None,
      bid: 0.0,
      ask: 0.0,
      timestamp: 0,
    }
  }
}

pub struct QuoteBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> QuoteBuilder<'a, 'b> {
  #[inline]
  pub fn add_symbol(&mut self, symbol: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Quote::VT_SYMBOL, symbol);
  }
  #[inline]
  pub fn add_bid(&mut self, bid: f32) {
    self.fbb_.push_slot::<f32>(Quote::VT_BID, bid, 0.0);
  }
  #[inline]
  pub fn add_ask(&mut self, ask: f32) {
    self.fbb_.push_slot::<f32>(Quote::VT_ASK, ask, 0.0);
  }
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(Quote::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> QuoteBuilder<'a, 'b> {
    let start = _fbb.start_table();
    QuoteBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Quote<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Quote<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Quote");
      ds.field("symbol", &self.symbol());
      ds.field("bid", &self.bid());
      ds.field("ask", &self.ask());
      ds.field("timestamp", &self.timestamp());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_quote<'a>(buf: &'a [u8]) -> Quote<'a> {
  unsafe { flatbuffers::root_unchecked::<Quote<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_quote<'a>(buf: &'a [u8]) -> Quote<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Quote<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `Quote`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_quote_unchecked`.
pub fn root_as_quote(buf: &[u8]) -> Result<Quote, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Quote>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Quote` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_quote_unchecked`.
pub fn size_prefixed_root_as_quote(buf: &[u8]) -> Result<Quote, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Quote>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Quote` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_quote_unchecked`.
pub fn root_as_quote_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Quote<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Quote<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Quote` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_quote_unchecked`.
pub fn size_prefixed_root_as_quote_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Quote<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Quote<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Quote and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Quote`.
pub unsafe fn root_as_quote_unchecked(buf: &[u8]) -> Quote {
  flatbuffers::root_unchecked::<Quote>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Quote and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Quote`.
pub unsafe fn size_prefixed_root_as_quote_unchecked(buf: &[u8]) -> Quote {
  flatbuffers::size_prefixed_root_unchecked::<Quote>(buf)
}
#[inline]
pub fn finish_quote_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Quote<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_quote_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Quote<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
} // end of pub mod market_data
pub use market_data::*;
pub use market_data::Quote;
pub use market_data::QuoteArgs;

